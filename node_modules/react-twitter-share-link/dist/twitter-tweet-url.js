'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.TwitterTweetUrl = exports.defaultTwitterBaseUrl = exports.defaultTwitterUrlOptions = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _queryString = require('query-string');

var _queryString2 = _interopRequireDefault(_queryString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultTwitterUrlOptions = exports.defaultTwitterUrlOptions = {
	link: typeof document !== 'undefined' ? document.location.href : null,
	text: null,
	hashtags: null,
	via: null,
	related: null,
	customQueryParams: null
};
var defaultTwitterBaseUrl = exports.defaultTwitterBaseUrl = 'https://twitter.com/intent/tweet';

var TwitterTweetUrl = exports.TwitterTweetUrl = function () {
	function TwitterTweetUrl() {
		var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultTwitterBaseUrl;
		(0, _classCallCheck3.default)(this, TwitterTweetUrl);

		if (!_lodash2.default.isObject(options) || _lodash2.default.isArray(options)) {
			throw new Error('Provided options can only be of type object');
		}

		this.options = Object.assign({}, defaultTwitterUrlOptions, options);

		// Sometimes the defaultTwitterUrlOptions will be defined before the browser is ready which evaluates the link to
		// null, and if the link is null the toUrl() call won't work. So this is to make sure the options.link is defined.
		if (_lodash2.default.isNil(this.options.link) && typeof document !== 'undefined') {
			this.options.link = document.location.href;
		}

		if (!_lodash2.default.isString(baseUrl)) {
			throw new Error('Provided baseUrl can only be of type string');
		}

		// Changed the base url to 'https://twitter.com/intent/tweet' instead of 'https://twitter.com/share'
		// Because /share adds the 'original_referer' param and forwards it to 'https://twitter.com/intent/tweet'
		this.baseUrl = baseUrl;
	}

	/**
  * Converts an array into a comma separated list.
  *
  * format: input => output
  * e.g ['test', 'test ', ''] => 'test,test'
  * or ['test'] => 'test'
  *
  * @param strOrArr
  * @returns {string}
  */


	(0, _createClass3.default)(TwitterTweetUrl, [{
		key: 'toUrl',


		/**
   * Converts the options into a url based on the button parameter reference:
   * https://developer.twitter.com/en/docs/twitter-for-websites/tweet-button/guides/parameter-reference1
   *
   * @returns {string}
   */
		value: function toUrl() {

			// Check if options.link is a string
			if (!_lodash2.default.isString(this.options.link)) {
				throw new Error('options.link can only be in string format');
			}

			var params = {
				url: this.options.link
			};

			// Set the baseUrl with the link url.
			var url = this.baseUrl;

			// Check if there is text and then adds that text as a param to the url.
			if (!_lodash2.default.isNil(this.options.text)) {
				// Check if options.text is a string.
				if (!_lodash2.default.isString(this.options.text)) {
					throw new Error('options.text can only be in string format');
				}

				params.text = this.options.text;
			}

			// Checks if hashtags are provided.
			if (!_lodash2.default.isNil(this.options.hashtags)) {
				// Check if options.hashtags has the correct type.
				if (!(_lodash2.default.isArray(this.options.hashtags) || _lodash2.default.isString(this.options.hashtags))) {
					throw new Error('options.hashtags can only be in array or string format');
				}

				var hashtags = null;
				if (_lodash2.default.isArray(this.options.hashtags)) {
					hashtags = TwitterTweetUrl.arrayToCommaSeparatedList(this.options.hashtags);
				} else if (_lodash2.default.isString(this.options.hashtags)) {
					hashtags = TwitterTweetUrl.stringToCommaSeparatedList(this.options.hashtags);
				}

				if (hashtags !== null) {
					params.hashtags = hashtags;
				}
			}

			// Check if options.via is provided.
			if (!_lodash2.default.isNil(this.options.via)) {
				// Check if via is of the correct type.
				if (!_lodash2.default.isString(this.options.via)) {
					throw new Error('options.via can only be in string format');
				}

				params.via = this.options.via;
			}

			// Check if options.related is provided.
			if (!_lodash2.default.isNil(this.options.related)) {
				// Check if options.related is a array or string.
				if (!(_lodash2.default.isArray(this.options.related) || _lodash2.default.isString(this.options.related))) {
					throw new Error('options.related can only be in array or string format');
				}

				var related = null;
				if (_lodash2.default.isArray(this.options.related)) {
					related = TwitterTweetUrl.arrayToCommaSeparatedList(this.options.related);
				} else if (_lodash2.default.isString(this.options.related)) {
					related = TwitterTweetUrl.stringToCommaSeparatedList(this.options.related);
				}

				if (related !== null) {
					params.related = related;
				}
			}

			var other = '';
			// Check if other is provided.
			if (!_lodash2.default.isNil(this.options.customQueryParams)) {
				// Check if the options.customQueryParams is a object or a string
				if (!(_lodash2.default.isObject(this.options.customQueryParams) || _lodash2.default.isString(this.options.customQueryParams)) || _lodash2.default.isArray(this.options.customQueryParams)) {
					throw new Error('options.customQueryParams can only be in object or string format');
				}

				if (_lodash2.default.isObject(this.options.customQueryParams)) {
					other = _queryString2.default.stringify(this.options.customQueryParams);
				} else if (_lodash2.default.isString(this.options.customQueryParams)) {
					other = _queryString2.default.stringify(_queryString2.default.parse(this.options.customQueryParams));
				}
			}

			if (Object.keys(params).length > 0) {
				url += '?' + _queryString2.default.stringify(params);

				if (other.trim() !== '') {
					url += '&' + other;
				}
			} else if (other.trim() !== '') {
				url += '?' + other;
			}

			return url;
		}
	}], [{
		key: 'arrayToCommaSeparatedList',
		value: function arrayToCommaSeparatedList() {
			var strOrArr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

			if (!(_lodash2.default.isArray(strOrArr) || _lodash2.default.isString(strOrArr))) {
				throw new Error('Can only provide string or array');
			}

			if (_lodash2.default.isString(strOrArr)) {
				strOrArr = [strOrArr];
			}

			var str = strOrArr.filter(function (item) {
				return _lodash2.default.isString(item) || _lodash2.default.isNumber(item);
			}).map(function (item) {
				return item.toString().trim();
			}).filter(function (item) {
				return item !== '';
			}).join(',');

			return str;
		}

		/**
   * Converts a string into a comma separated list
   *
   * format: input => output
   * e.g 'test, test,' => 'test,test'
   * or 'test, test' => 'test,test'
   * or 'test test' => 'test,test'
   * or 'test' => 'test'
   *
   * @param str
   * @returns {string}
   */

	}, {
		key: 'stringToCommaSeparatedList',
		value: function stringToCommaSeparatedList() {
			var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

			if (!_lodash2.default.isString(str)) {
				throw new Error('Can only provide string');
			}

			str = str.trim().split(',').join(' ').split(' ').filter(function (item) {
				return item.trim() !== '';
			}).map(function (item) {
				return item.trim();
			}).join(',');

			return str;
		}
	}]);
	return TwitterTweetUrl;
}();
//# sourceMappingURL=twitter-tweet-url.js.map